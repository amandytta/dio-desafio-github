O que é Git?
Git é uma sistema de controle de versão. Tanto software comerciais como open source (código aberto) utilizam Git. Este sistema permite que diversos desenvolvedores trabalhem sobre o mesmo código sem que um atrapalhe o outro. Ele permite você “voltar ao passado” e analisar uma versão de código antiga.

É um sistema distribuído. Isto quer dizer que há uma cópia do repositório completo com todo o histórico de mudanças no computador do desenvolvedor.

Conceitos básicos do git:
Repositório – é o agrupamento lógico do arquivos de um projeto. Imagine que você tem dois projetos diferentes um de e-commerce e um de blog, o código fonte de cada um deles ficará separado em repositório diferentes.

Origin – se refere ao repositório original, a fonte principal. É o repositório remoto que sincroniza o código de todos os desenvolvedores do projeto. O Github é um repositório origin por exemplo.

Branch – o git trabalha com “ramos”, e o termo branch se refere a um ramo de código. Quando você cria um branch, você herda todo o código na versão atual. O seu branch fica isolado, quando você terminar suas modificações, você une seu ramo de volta ao código original. Deste ponto em diante, todos que atualizarem o código terão sua versão.  

Main/Master – main/master é o ramo principal, normalmente é onde o código mais atual ou seja, a versão que está rodando em produção fica guardado.

Commit – o commit representa uma versão. O usual é fazer alterações no código, em diversos arquivos separados e assim que tivermos uma versão funcional, fazemos um commit incluindo todas as modificações que foram feitas até então. Esse commit vira um ponto na história que podemos resgatar quando quisermos.

Checkout – ação de apontar o repositório para uma certa versão ou branch.

Como usar o Git?
1º Passo – Instalar o GIT

Instalar o GIT no Windows:
É tão simples como baixar um instalador e executá-lo. Execute os seguintes passos para instalar o GIT no Windows:

- Acesse o site oficial e faça o download do instalador do GIT para Windows.
- Depois de baixado, clique duas vezes no arquivo para iniciar o assistente de instalação. Basta seguir as instruções na tela, clicando em Next. Ao término, clique em Finish para concluir com êxito a instalação.
- Abra o prompt de comando e digite os seguintes comandos no terminal:
	git config --global user.name "seu nome"
	git config --global user.email "exemplo@seuemail.com.br"

Instalar o GIT no MacOS:
Execute os seguintes passos:

- Visite este site https://sourceforge.net/projects/git-osx-installer/files/ e faça o download do instalador mais recente para Mac.
- Siga as instruções na tela e conclua a instalação.
- Use o comando git --version para confirmar se a instalação foi bem sucedida.
- Execute os seguintes comandos no terminal para configurar seu e-mail e nome de usuário que serão associados à sua conta GIT:
	git config --global user.name "seu nome"
	git config --global user.email "exemplo@seuemail.com.br"

Instalar o GIT no Linux:
Para usuários Debian/Ubuntu (apt-get):

- Abra o terminal e execute os seguintes comandos:
	sudo apt-get update 
	sudo apt-get install git

- Verifique se a instalação ocorreu com sucesso usando git --version.
- Execute os seguintes comandos no terminal para configurar seu e-mail e nome de usuário que serão associados à sua conta GIT:
	git config --global user.name "seu nome" 
	git config --global user.email "exemplo@seuemail.com.br"

Fedora (yum/dnf):

Você pode baixar pacotes do GIT usando yum e dnf.

- Abra o terminal e execute os seguintes comandos:
	sudo dnf install git
	sudo yum install git
- Verifique se a instalação ocorreu com sucesso usando git --version.
- Execute os seguintes comandos no terminal para configurar seu e-mail e nome de usuário que serão associados à sua conta GIT:
	git config --global user.name "seu nome" 
	git config --global user.email "exemplo@seuemail.com.br"

2º Passo - Comandos Básicos de GIT
- git config
Usado para definir valores de configuração específicos do usuário como e-mail, algoritmo preferido para diff, nome de usuário e formato de arquivo etc. Por exemplo, o seguinte comando pode ser usado para definir o email:
	git config --global user.email sam@google.com

- git init
Este comando é usado para criar um novo repositório GIT.
	git init

- git add
Usado para adicionar arquivos ao índice. Por exemplo, o seguinte comando irá adicionar um arquivo chamado temp.txt presente no diretório local para o índice:
	git add temp.txt 

Ou use o seguinte comando para adicionar todos os arquivos ao índice: 
	git add .

- git clone
Usado para clonar/verificar um repositório remoto. Use:
	git clone https://github.com/seunome/repositorio.git

obs: substitua "seunome" pelo seu nome no github e "repositório" pelo nome do repositório que você quer clonar para seu repositório local. 

- git commit
Usado para confirmar as alterações feitas. Tenha em atenção que quaisquer alterações efetuadas não irão para o repositório remoto.
	git commit –m “coloque sua mensagem aqui”

- git status
Exibe a lista de arquivos alterados juntamente com os arquivos que ainda não foram adicionados ou confirmados.
	git status

- git push
Envia as alterações feitas no repositório local para o remoto. Por exemplo:
	git push origin main

obs: substitua main para o nome da branch onde as alterações foram feitas.

- git checkout
Usado para criar ramos ou alternar entre eles. Por exemplo, o seguinte cria um novo ramo e muda para ele:
	git checkout -b branch-name

Para simplesmente mudar de um ramo para outro, use:
	git checkout branch-name

obs: substitua branch-name pelo nome da branch que você quer criar/alternar.

- git remote
Permite que um usuário se conecte a um repositório remoto. O comando a seguir lista os repositórios remotos atualmente configurados:
	git remote –v

Esse comando permite que o usuário se conecte a um servidor remoto:
	git remote add origin 93.188.160.58

obs: substitua 93.188.160.58 pelo link/ssh do repositório remoto que você quer se conectar.

- git branch
Usado para listar, criar ou excluir ramos. Para listar todos os ramos presentes no repositório, use:
	git branch

Para excluir um ramo:
	git branch –d branch-name

obs: substitua branch-name pelo nome da branch que você quer excluir.

- git pull
Para mesclar/puxar todas as informações ou alterações presentes no repositório remoto para o diretório de trabalho local.
	git pull

- git merge
Usado para mesclar uma branch com a branch ativa.
	git merge branch-name

- git diff
Usado para listar os conflitos. Para visualizar conflitos com o arquivo base, use:
	git diff --base file-name

O seguinte comando é usado para exibir os conflitos entre ramos about-to-be-merged antes de mesclá-los:
	git diff source-branch target-branch

obs: substitua os nomes source-branch e target-branch pelo nome das branch que estão em conflito.

Para simplesmente listar todos os conflitos atuais, use:
	git diff

- git tag
A marcação é usada para marcar compromissos específicos com alças simples. Um exemplo pode ser:
	git tag 1.1.0 commitID

obs: substitua commitID pelo id do commit que você quer marcar.

- git log
Exibe uma lista de compromissos em uma ramificação, juntamente com os detalhes pertinentes. Um exemplo de saída pode ser:

	commit 15f4b6c44b3c8344caasdac9e4be13246e21sadw
	Author: Alex Hunter <alexh@gmail.com>
	Date:   Mon Oct 1 12:56:29 2016 -0600

- git reset
Para redefinir o índice e o diretório de trabalho para o estado do último commit, o comando git reset é usado. Uso:
	git reset --hard HEAD

- git rm
Pode ser usado para remover arquivos do índice e do diretório de trabalho. Uso:
	git rm filename.txt

- git stash
Ajuda a salvar as mudanças que não devem ser cometidos imediatamente, mas em uma base temporária.
	git stash

- git fetch
Permite que um usuário obtenha todos os objetos do repositório remoto que atualmente não residem no diretório de trabalho local. Exemplo de uso:
	git fetch origin

- git cat-file
Usando o valor SHA-1, exiba o tipo de um objeto usando o comando git cat-file. Por exemplo:
	git cat-file –p d670460b4b4aece5915caf5c68d12f560a9fe3e4

ou simplesmente: 
	cat file-name

- git grep
Permite que um usuário procure através das árvores de conteúdo frases e / ou palavras. Por exemplo, para pesquisar github em todos os arquivos use:
	git grep "github"

- git gc
Para otimizar o repositório através da coleta de lixo, que irá limpar arquivos desnecessários e otimizá-los, use:
	git gc

- git fsck
Para executar uma verificação de integridade do sistema de arquivos git, use o comando git fsck. Todos os objetos corrompidos são identificados:
	git fsck

- git rebase
Usado para reaplicação de compromissos em outra branch. Por exemplo:
	git rebase master
